// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestProject.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class UsingVSCodeAndSpecFlowFeature : Xunit.IClassFixture<UsingVSCodeAndSpecFlowFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "UsingVSCodeAndSpecFlow.feature"
#line hidden
        
        public UsingVSCodeAndSpecFlowFeature(UsingVSCodeAndSpecFlowFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Using VSCode and SpecFlow", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
    #line 4
        testRunner.Given("I use VS Code", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="I want to write scenarios in VSCode without extensions")]
        [Xunit.TraitAttribute("FeatureTitle", "Using VSCode and SpecFlow")]
        [Xunit.TraitAttribute("Description", "I want to write scenarios in VSCode without extensions")]
        public virtual void IWantToWriteScenariosInVSCodeWithoutExtensions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to write scenarios in VSCode without extensions", null, ((string[])(null)));
#line 6
    this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line 8
        testRunner.Given("I have no extensions installed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
        testRunner.When("I write scenarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
        testRunner.Then("it is really boring", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="I want to write scenarios in VSCode with extensions")]
        [Xunit.TraitAttribute("FeatureTitle", "Using VSCode and SpecFlow")]
        [Xunit.TraitAttribute("Description", "I want to write scenarios in VSCode with extensions")]
        public virtual void IWantToWriteScenariosInVSCodeWithExtensions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("I want to write scenarios in VSCode with extensions", null, ((string[])(null)));
#line 13
    this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 3
    this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Extension"});
            table1.AddRow(new string[] {
                        "Cucumber (Gherkin) Full Support"});
#line 15
        testRunner.Given("I have following extensions installed:", ((string)(null)), table1, "Given ");
#line 19
        testRunner.When("I write scenarios", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Functionality"});
            table2.AddRow(new string[] {
                        "Syntax Highlighting"});
            table2.AddRow(new string[] {
                        "limited IntelliSense"});
            table2.AddRow(new string[] {
                        "formatting of document"});
#line 21
        testRunner.Then("I have following functionality", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                UsingVSCodeAndSpecFlowFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                UsingVSCodeAndSpecFlowFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
